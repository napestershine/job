<?php

namespace Yarsha\OrganizationBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Yarsha\JobSeekerBundle\Entity\User as JobSeeker;
use Yarsha\OrganizationBundle\Entity\Organization;
use Yarsha\OrganizationBundle\OrganizationConstants;

/**
 * OrganizationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganizationRepository extends EntityRepository
{

    public function getOrganizationList($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.deleted = 0');

        $this->organizationFilters($filters, $qb);

        $qb->orderBy('o.id', 'DESC');

        return $qb;
    }

    public function getSuperEmployers($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.status = :status')
            ->andWhere('o.deleted = 0')
            ->andWhere('o.categoryType = :categoryType')
            ->andWhere('o.isNewspaperOrganization = 0')
            ->andWhere('o.isGovermentOrganization = 0')
            ->setParameter('status', OrganizationConstants::ORGANIZATION_STATUS_APPROVED)
            ->setParameter('categoryType', Organization::SUPER_EMPLOYER);

        if ($limit != null && $limit >= 1) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }


    public function getTopAndSuperEmployers($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o');

        $qb->where(
            $qb->expr()->orX(
                $qb->expr()->like('o.categoryType', $qb->expr()->literal(organization::SUPER_EMPLOYER)),
                $qb->expr()->like('o.categoryType', $qb->expr()->literal(organization::TOP_EMPLOYER))
            )
        );

        $qb->andWhere('o.status = :status')
            ->andWhere('o.deleted = 0')
            ->andWhere('o.isNewspaperOrganization = 0')
            ->andWhere('o.isGovermentOrganization = 0')
            ->setParameter('status', OrganizationConstants::ORGANIZATION_STATUS_APPROVED);

        if ($limit != null && $limit >= 1) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }


    public function getTopEmployers($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.status = :status')
            ->andWhere('o.deleted = 0')
            ->andWhere('o.categoryType = :categoryType')
            ->andWhere('o.isNewspaperOrganization = 0')
            ->andWhere('o.isGovermentOrganization = 0')
            ->setParameter('status', OrganizationConstants::ORGANIZATION_STATUS_APPROVED)
            ->setParameter('categoryType', Organization::TOP_EMPLOYER)
            ->orderBy('o.id', 'DESC');

        if ($limit != null && $limit >= 1) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function getHiringEmployers($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.status = :status')
            ->andWhere('o.deleted = 0')
            ->andWhere('o.categoryType = :categoryType')
            ->andWhere('o.isNewspaperOrganization = 0')
            ->andWhere('o.isGovermentOrganization = 0')
            ->setParameter('status', OrganizationConstants::ORGANIZATION_STATUS_APPROVED)
            ->setParameter('categoryType', Organization::HIRING_EMPLOYER)
            ->orderBy('o.id', 'DESC');

        if ($limit != null && $limit >= 1) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }


    public function getFeaturedEmployers($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.status = :status')
            ->andWhere('o.deleted = 0')
            ->andWhere('o.categoryType = :categoryType')
            ->andWhere('o.isNewspaperOrganization = 0')
            ->andWhere('o.isGovermentOrganization = 0')
            ->setParameter('status', OrganizationConstants::ORGANIZATION_STATUS_APPROVED)
            ->setParameter('categoryType', Organization::FEATURED_EMPLOYER);

        $qb->orderBy('o.id', 'desc');

        if ($limit != null && $limit >= 1) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function getOrganizationsForSelect()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select(['o.id', 'o.name'])
            ->from(Organization::class, 'o')
            ->where('o.deleted = 0')
            ->andWhere('o.status = :status')->setParameter('status',
                OrganizationConstants::ORGANIZATION_STATUS_APPROVED);

        $qb->orderBy('o.name', 'ASC');

        return $qb->getQuery()->getArrayResult();
    }

    public function getGovermentOrganizationListQueryBuilder($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.isGovermentOrganization = 1')
            ->andWhere('o.deleted =:deleted')->setParameter('deleted', 0);

        return $qb;
    }

    public function getTrashedOrganizations($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.isGovermentOrganization != 1')
            ->andWhere('o.deleted =:deleted')->setParameter('deleted', 1);
        $this->organizationFilters($filters, $qb);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $filters
     * @param $qb
     */
    public function organizationFilters($filters, $qb)
    {
        if (array_key_exists('name', $filters) and $filters['name'] != '') {
            $qb->andWhere(
                $qb->expr()->like('o.name', $qb->expr()->literal('%' . $filters['name'] . '%'))
            );
        }

        if (array_key_exists('email', $filters) and $filters['email'] != '') {
            $qb->andWhere(
                $qb->expr()->like('o.email', $qb->expr()->literal('%' . $filters['email'] . '%'))
            );
        }

        if (array_key_exists('address', $filters) and $filters['address'] != '') {
            $qb->andWhere(
                $qb->expr()->like('o.address', $qb->expr()->literal('%' . $filters['address'] . '%'))
            );
        }

        if (array_key_exists('industry', $filters) and $filters['industry'] != '') {
            $qb->andWhere('IDENTITY(o.industry) = :industry')->setParameter('industry', $filters['industry']);
        }

        if (array_key_exists('function', $filters) and $filters['function'] != '') {
            $qb->andWhere('IDENTITY(o.category) = :function')->setParameter('function', $filters['function']);
        }

        if (array_key_exists('status', $filters) and $filters['status'] != '') {
            $qb->andWhere('o.status = :status')->setParameter('status', $filters['status']);
        }

        if (array_key_exists('category', $filters) and $filters['category'] != '') {
            $qb->andWhere('o.categoryType = :category')->setParameter('category', $filters['category']);
        }
    }

    public function getAllFollowers($organization)
    {
        $result = [];
        $followers = $organization->getFollowers();
        if (count($followers) > 0) {
            foreach ($followers as $follower) {
                if ($follower->isDeleted() == false) {
                    array_push($result, $follower);
                }
            }
        } else {
            $result = [];
        }

        return array_reverse($result);
    }

    public function getRandomFollowers($organization, $limit = 12)
    {
        $followers = $this->getAllFollowers($organization);
        if (count($followers) > $limit) {
            $results = array_rand($followers, 12);
            $result = [];
            foreach ($results as $r) {
                array_push($result, $followers[$r]);
            }
        } else {
            $result = $followers;
        }

        return $result;
    }

    public function removeFollowedOrganizationBySeeker($orgId)
    {
        $sql = "DELETE FROM ys_organization_followers where organization_id = $orgId";

        $this->_em->getConnection()->query($sql);
    }


}
