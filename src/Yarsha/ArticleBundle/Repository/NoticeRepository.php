<?php

namespace Yarsha\ArticleBundle\Repository;

use Yarsha\JobsBundle\Entity\Job;
use Doctrine\ORM\EntityRepository;
use Yarsha\ArticleBundle\Entity\Notice;
use Yarsha\JobsBundle\Entity\JobApplied;
use Yarsha\MainBundle\MainBundleConstants;
use Yarsha\ArticleBundle\ArticleConstants;
use Yarsha\EmployerBundle\Entity\User as Employer;
use Yarsha\OrganizationBundle\Entity\Organization;

/**
 * NoticeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoticeRepository extends EntityRepository
{

    public function getAll($userId = '', $userType = '', $filters = [])
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from(Notice::class, 'n')
            ->where('n.isDeleted != 1');
        if ($userId != '') {
            $qb->andWhere('n.userId = :userId')->setParameter('userId', $userId);
        }
        if ($userType != '') {
            $qb->andWhere('n.userType = :userType')->setParameter('userType', $userType);
        }
        if (!empty($filters)) {
            foreach ($filters as $key => $value) {
                $qb->andWhere('n.' . $key . '=' . $value);
            }
        }

        return $qb;

    }

    public function getPaginatedNoticeQuery(Array $filters = [])
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from(Notice::class, 'n')
            ->where('n.status = ' . ArticleConstants::ARTICLE_STATUS_PUBLISHED);

        foreach ($filters as $key => $value) {
            $qb->andWhere("n.{$key} = {$value}");
        }

        return $qb;
    }

    public function getNoticesForSeekerQueryBuilder($seekerId, $limit = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from(Notice::class, 'n')
            ->where('n.isDeleted = 0')
            ->andWhere('n.status = :status')->setParameter('status', ArticleConstants::ARTICLE_STATUS_PUBLISHED)
            ;

        $followedEmployerQB = $this->_em->createQueryBuilder();
        $followedEmployerQB->select('e.id')
            ->from(Organization::class, 'o')
            ->leftJoin(Employer::class, 'e', 'WITH', 'e.organization=o.id')
            ->leftJoin('o.followers', 'f')
            ->where('f.id = '.$seekerId)
            ->andWhere($followedEmployerQB->expr()->isNotNull('e.id'))
        ;

        $appliedEmployeeQB = $this->_em->createQueryBuilder();
        $appliedEmployeeQB->select('emp.id')
            ->from(Employer::class, 'emp')
            ->leftJoin(Job::class, 'j', 'WITH', 'emp.organization = j.organization')
            ->leftJoin(JobApplied::class, 'a', 'WITH', 'j.id = a.job')
            ->where('a.jobSeeker = '. $seekerId)
            ;

        $qb->andWhere(
            $qb->expr()->orX(
                'n.userType = '. MainBundleConstants::USER_TYPE_ADMIN,
                $qb->expr()->andX(
                    'n.userType = '.MainBundleConstants::USER_TYPE_EMPLOYER,
                    $qb->expr()->in('n.userId', $followedEmployerQB->getDQL())
                ),
                $qb->expr()->andX(
                    'n.userType = '.MainBundleConstants::USER_TYPE_EMPLOYER,
                    $qb->expr()->in('n.userId', $appliedEmployeeQB->getDQL())
                )
            )
        );

        $qb->orderBy('n.createdDate', 'DESC');

        if($limit)
        {
            $qb->setMaxResults($limit);
        }

        return $qb;
    }

}
