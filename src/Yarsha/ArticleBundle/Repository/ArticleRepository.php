<?php

namespace Yarsha\ArticleBundle\Repository;

use Yarsha\ArticleBundle\Entity\Article;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

    public function getArticleList($filters)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('article')
            ->from(Article::class, 'article')
            ->where('article.deleted = 0');
        if (array_key_exists('type', $filters) and $filters['type'] != '') {
            $qb->andWhere('article.type = :type')->setParameter('type', $filters['type']);
        }

        if (array_key_exists('category', $filters) and $filters['category'] != '') {
            $qb->andWhere('article.category = :category')->setParameter('category', $filters['category']);
        }

        if (array_key_exists('title', $filters) and $filters['title'] != "") {
            $qb->andWhere(
                $qb->expr()->like('article.title', $qb->expr()->literal("%" . $filters['title'] . "%"))
            );
        }

        $qb->orderBy('article.id', 'DESC');

        return $qb;
    }

    public function getFrontendArticleList($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
            ->from(Article::class, 'a')
            ->where('a.status = 1')
            ->andWhere('a.deleted = 0');
        if (array_key_exists('type', $filters) and $filters['type'] != '') {
            $qb->andWhere('a.type = :type')->setParameter('type', $filters['type']);
        }
        if (array_key_exists('category', $filters) and $filters['category'] != '') {
            $qb->andWhere('a.category = :category')->setParameter('category', $filters['category']);
        }
        $qb->addOrderBy('a.id', 'DESC');

        if (array_key_exists('limit', $filters) and $filters['limit'] != '') {
            $qb->setMaxResults($filters['limit']);
        }

        return $qb->getQuery()->getResult();


    }
}
