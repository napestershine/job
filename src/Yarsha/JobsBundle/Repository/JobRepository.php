<?php

namespace Yarsha\JobsBundle\Repository;

use Yarsha\JobsBundle\Entity\Job;
use Doctrine\ORM\EntityRepository;
use Yarsha\JobsBundle\Entity\JobSetting;
use Yarsha\JobsBundle\JobConstants;
use Yarsha\JobSeekerBundle\Entity\EmployeeAppliedJob;
use Yarsha\MainBundle\MainBundleConstants;
use Yarsha\JobSeekerBundle\Entity\User as JobSeeker;
use Yarsha\EmployerBundle\Entity\User as Employer;
use Yarsha\OrganizationBundle\Entity\Organization;
use Yarsha\OrganizationBundle\OrganizationConstants;
use Yarsha\JobSeekerBundle\Entity\JobSeekerCallRecord;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{

    public function getJobs($currentDate, $approvedOnly = true)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->join('j.organization', 'o')
            ->where('o.deleted !=1')
            ->andWhere('o.status = :status')->setParameter('status',
                OrganizationConstants::ORGANIZATION_STATUS_APPROVED)
            ->andWhere('j.deadline >= :currentDate')->setParameter('currentDate', $currentDate);

        if ($approvedOnly) {
            $qb->andWhere('j.status =' . JobConstants::JOB_STATUS_APPROVED);
        }

        return $qb->getQuery()->getResult();
    }

    public function getJobList($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->leftJoin('j.locations', 'l')
            ->where('j.status !=' . JobConstants::JOB_STATUS_DELETED)
            ->join('j.organization', 'o')
            ->andWhere('o.deleted !=1')
            ->andWhere('o.status = :status')->setParameter('status',
                OrganizationConstants::ORGANIZATION_STATUS_APPROVED);

        if (!array_key_exists('showAll', $filters) or $filters['showAll'] === false) {
            $qb->andWhere('o.status = :status')->setParameter('status',
                OrganizationConstants::ORGANIZATION_STATUS_APPROVED);
        }

        if (array_key_exists('title', $filters) and $filters['title'] != "") {
            $qb->andWhere(
                $qb->expr()->like('j.title', $qb->expr()->literal("%" . $filters['title'] . "%"))
            );
        }

        if (array_key_exists('organization', $filters) and $filters['organization'] != "") {
            $qb->andWhere('IDENTITY(j.organization) = :organization')
                ->setParameter('organization', $filters['organization']);
        }

        if (array_key_exists('function', $filters) and $filters['function'] != "") {
            $qb->andWhere('IDENTITY(j.category) = :function')
                ->setParameter('function', $filters['function']);
        }

        if (array_key_exists('industry', $filters) and $filters['industry'] != "") {
            $qb->andWhere('IDENTITY(j.industry) = :industry')
                ->setParameter('industry', $filters['industry']);
        }

        if (array_key_exists('location', $filters) and $filters['location'] != "") {
            $qb->andWhere('l.id = :location')
                ->setParameter('location', $filters['location']);
        }

        if (array_key_exists('status', $filters) and $filters['status'] != "") {
            $qb->andWhere('j.status = :status')
                ->setParameter('status', $filters['status']);
        }

        if (array_key_exists('type', $filters) and $filters['type'] != "") {
            $qb->andWhere('j.type = :type')
                ->setParameter('type', $filters['type']);
        }

        return $qb->orderBy('j.updatedDate', 'DESC');

    }

    public function getJobCountByStatus()
    {
        $today = date('Y-m-d');
        $manager = $this->getEntityManager();
        $qb = $manager->createQuery(
            "SELECT SUM(CASE WHEN j.status = " . JobConstants::JOB_STATUS_APPROVED . " THEN 1 ELSE 0 END) AS approved ,
            SUM(CASE WHEN j.status = " . JobConstants::JOB_STATUS_PENDING . " THEN 1 ELSE 0 END) AS pending,
             SUM(CASE WHEN j.status = " . JobConstants::JOB_STATUS_DISABLED . " THEN 1 ELSE 0 END) AS disabled,
             SUM(CASE WHEN j.status = " . JobConstants::JOB_STATUS_DELETED . " THEN 1 ELSE 0 END) AS deleted,
             SUM(CASE WHEN j.id != '' THEN 1 ELSE 0 END) AS total_jobs
            FROM YarshaJobsBundle:Job  j WHERE j.createdDate >= '.$today.'"
        );

        return $qb->getArrayResult();
    }

    public function getTodaysJobCount()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status !=' . JobConstants::JOB_STATUS_DELETED)
            ->andWhere('j.createdDate > :date_start')
            ->andWhere('j.createdDate < :date_end')
            ->setParameter('date_start', date('Y-m-d 00:00:00'))
            ->setParameter('date_end', date('Y-m-d H:i:s'));

        return $qb->getQuery()->getResult();
    }

    public function getTodaysEmployerCount()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('o')
            ->from(Organization::class, 'o')
            ->where('o.deleted = 0 ')
            ->andWhere('o.createdDate > :date_start')
            ->andWhere('o.createdDate < :date_end')
            ->setParameter('date_start', date('Y-m-d 00:00:00'))
            ->setParameter('date_end', date('Y-m-d H:i:s'));

        return $qb->getQuery()->getResult();
    }

    public function getTodaysSeeekerCount()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('s')
            ->from(JobSeeker::class, 's')
            ->where('s.deleted = 0 ')
            ->andWhere('s.createdAt > :date_start')
            ->andWhere('s.createdAt < :date_end')
            ->setParameter('date_start', date('Y-m-d 00:00:00'))
            ->setParameter('date_end', date('Y-m-d H:i:s'));

        return $qb->getQuery()->getResult();
    }

    public function getTodaysApplied()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
            ->from(EmployeeAppliedJob::class, 'a')
            ->where('a.createdDate > :date_start')
            ->andWhere('a.createdDate < :date_end')
            ->setParameter('date_start', date('Y-m-d 00:00:00'))
            ->setParameter('date_end', date('Y-m-d H:i:s'));

        return $qb->getQuery()->getResult();
    }

    public function getTodaysPhoneCalls()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('r')
            ->from(JobSeekerCallRecord::class, 'r')
            ->where('r.calledDate = :today')
            ->setParameter('today', date('Y-m-d'));

        return $qb->getQuery()->getResult();
    }


    public function getApplicantByJob($jobId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from(EmployeeAppliedJob::class, 'a')
            ->join('a.employee', 'js')
            ->join('a.job', 'j')
            // ->where('a.status =' . 200)
            ->where('a.job =' . $jobId);

        return $qb;


    }

    public function getJobBySearch($filter)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status !=' . JobConstants::JOB_STATUS_DELETED);

        if ($filter['title']) {

            $qb->andWhere("j.title LIKE '%" . $filter['title'] . "%'");
        }

        if ($filter['category']) {
            $qb->andWhere('j.category = :id')->setParameter('id', $filter['category']);
        }

        if ($filter['organization']) {
            $qb->andWhere('j.organization = :id')->setParameter('id', $filter['organization']);
        }

        if ($filter['from']) {

            $qb->andWhere('j.deadline > :from')->setParameter('from', $filter['from']);

        }
        if ($filter['to']) {

            $qb->andWhere('j.deadline < :to')->setParameter('to', $filter['to']);
        }

        return $qb;
    }

    public function getJobBySearchQuery($filter)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->join('j.organization', 'o')
            ->where('j.status =' . JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'));

        if (isset($filter['title']) && $filter['title'] != '') {
            $qb->andWhere(
                $qb->expr()->like('j.title', $qb->expr()->literal('%' . $filter['title'] . '%'))
            );
        }

        if (isset($filter['organization']) && $filter['organization'] != '') {
            $qb->andWhere('j.organization = :organization')->setParameter('organization', $filter['organization']);

        }

        if (isset($filter['category']) && $filter['category'] != '') {
            $qb->andWhere('j.category = :category')->setParameter('category', $filter['category']);
        }

        if (isset($filter['industry']) && $filter['industry'] != '') {
            $qb->andWhere('o.industry = :industry')->setParameter('industry', $filter['industry']);
        }

        if (isset($filter['location']) && $filter['location'] != '') {
            $qb->join('j.locations', 'l');
            $qb->andWhere('l.id = :location')->setParameter('location', $filter['location']);
        }

        if (isset($filter['salary']) && $filter['salary'] != '') {
            $qb->andWhere('j.minimunSalary = :salary')->setParameter('salary', $filter['salary']);
        }

        if (isset($filter['level']) && $filter['level'] != '') {
            $qb->andWhere('j.level = :level')->setParameter('level', $filter['level']);
        }

        if (isset($filter['type']) && $filter['type'] != '') {
            $qb->andWhere('j.type = :type')->setParameter('type', $filter['type']);
        }

        if (isset($filter['availability']) && $filter['availability'] != '') {
            $qb->andWhere('j.availability = :availability')->setParameter('availability', $filter['availability']);
        }

        if (isset($filter['education']) && $filter['education'] != '') {
            $qb->andWhere('j.educationDegree = :education')->setParameter('education',
                $filter['education']);
        }

        if (isset($filter['jobsFrom']) && $filter['jobsFrom'] != '') {
            $qb->andWhere('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', $filter['jobsFrom']);

        }

//        $qb->addSelect("(CASE WHEN o.categoryType = 'super' THEN 0
//        WHEN o.categoryType = 'top' 1 ELSE 2 END) AS HIDDEN ORD)");

        $qb->orderBy('j.id', 'DESC');

        return $qb;
    }

    public function listJobsQueryBuilder($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->leftJoin('j.locations', 'l')
            ->join('j.organization', 'o')
            ->where('j.status !=' . JobConstants::JOB_STATUS_DELETED);

        if (array_key_exists('organization', $filters) and $filters['organization'] != '') {
            $qb->andWhere('o.id = :organization')->setParameter('organization', $filters['organization']);
        }

        if (array_key_exists('user', $filters) and array_key_exists('userType',
                $filters) and $filters['user'] != "" and $filters['userType'] != ""
        ) {
            $qb->andWhere('j.userId = :userID')->setParameter('userID', $filters['user']);

            if ($filters['userType'] == MainBundleConstants::USER_TYPE_EMPLOYER) {
                $qb->andWhere('j . jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS);
            } else {
                $qb->andWhere('j . jobsFrom != :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS);
            }

        }

        if (array_key_exists('title', $filters) and $filters['title'] != "") {
            $qb->andWhere(
                $qb->expr()->like('j.title', $qb->expr()->literal("%" . $filters['title'] . "%"))
            );
        }

        if (array_key_exists('status', $filters) and $filters['status'] != "") {
            $qb->andWhere('j.status = :status')->setParameter('status', $filters['status']);
        }
        $qb->orderBy('j.id', 'DESC');


        return $qb;
    }

    public function listJobsByEmployer($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->leftJoin('j.locations', 'l')
            ->join('j.organization', 'o')
            ->where('j.status !=' . JobConstants::JOB_STATUS_DELETED);

        if (array_key_exists('user', $filters) and array_key_exists('userType',
                $filters) and $filters['user'] != "" and $filters['userType'] != ""
        ) {
            $qb->andWhere('j.userId = :userID')->setParameter('userID', $filters['user']);

            if ($filters['userType'] == MainBundleConstants::USER_TYPE_EMPLOYER) {
                $qb->andWhere('j . jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS);
            } else {
                $qb->andWhere('j . jobsFrom != :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS);
            }

        }

        if (array_key_exists('organization', $filters) and $filters['organization'] != '') {
            $qb->andWhere('o.id = :organization')->setParameter('organization', $filters['organization']);
        }

        $qb->orderBy('j.id', 'DESC');
//        $qb->setMaxResults(10);

        return $qb->getQuery()->getResult();
    }

    public function getNewspaperJobsListQueryBuilder($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')
            ->setParameter('jobsFrom', JobConstants::JOB_FROM_NEWSPAPER);


        if (array_key_exists('title', $filters) and $filters['title'] != "") {
            $qb->andWhere(
                $qb->expr()->like('j.title', $qb->expr()->literal("%" . $filters['title'] . "%"))
            );
        }

        return $qb;
    }

    public function getNewspaperJobsList($filters = [])
    {
        $qb = $this->_em->createQuery(
            'SELECT j FROM YarshaJobsBundle:Job j WHERE j.jobsFrom = ' . JobConstants::JOB_FROM_NEWSPAPER
        );
        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')
            ->groupBy('j.id')
            ->having(
                $qb->expr()->count('j.id')
            )
            ->setParameter('jobsFrom', JobConstants::JOB_FROM_NEWSPAPER);

        if (array_key_exists('title', $filters) and $filters['title'] != "") {
            $qb->andWhere(
                $qb->expr()->like('j.title', $qb->expr()->literal("%" . $filters['title'] . "%"))
            );
        }

        return $qb;
    }

    public function getGovermentJobsListQueryBuilder($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_GOVERNMENT)
            ->andWhere('j.status != :status')->setParameter('status', JobConstants::JOB_STATUS_DELETED);


        if (array_key_exists('job_title', $filters) and $filters['job_title'] != "") {
            $qb->andWhere(
                $qb->expr()->like('j.title', $qb->expr()->literal("%" . $filters['job_title'] . "%"))
            );
        }

        return $qb;
    }

    public function getGovermentJobsList($limit)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_GOVERNMENT)
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'))
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED);
        $qb->addOrderBy('j.id', 'DESC');
        $qb->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    public function getFrontendJobList($type = '', $limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS)
            ->orWhere('j.jobsFrom = :jobsFrom1')->setParameter('jobsFrom1', JobConstants::JOB_FROM_NEWSPAPER)
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED);
        if ($type != '') {
            $qb->andWhere('j.type = :type')->setParameter('type', $type);
        }
        $qb->addOrderBy('j.id', 'DESC');
        if (is_numeric($limit) && $limit > 0) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function getEmployersWithHotJobs($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->leftJoin(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS)
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.type = :type')->setParameter('type', JobConstants::JOBS_TYPE_HOT)
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'))
            ->addOrderBy('j.id', 'DESC');

        if (is_numeric($limit) && $limit > 0) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function getEmployersWithNewspaperJobs($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->leftJoin(Job::class, 'j')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_NEWSPAPER)
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->addOrderBy('j.id', 'DESC');

        if (is_numeric($limit) && $limit > 0) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function getEmployersWithFeaturedJobs($limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('o')
            ->from(Organization::class, 'o')
            ->join(Job::class, 'j')
            ->andWhere('o.isNewspaperOrganization != 1 ')
            ->andWhere('o.isGovermentOrganization != 1')
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.type = :type')->setParameter('type', JobConstants::JOBS_TYPE_FEATURED)
            ->addOrderBy('j.id', 'DESC');

        if (is_numeric($limit) && $limit > 0) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    public function getHotJobsByOrganizationQuery($organization)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->join(Organization::class, 'o')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS)
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.type = :type')->setParameter('type', JobConstants::JOBS_TYPE_HOT)
            ->andWhere('j.organization = :orgId')->setParameter('orgId', $organization->getId())
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'))
            ->addOrderBy('j.id', 'DESC');

        return $qb->getQuery();
    }

    public function getFeaturedJobsByOrganizationQuery($organization)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->join(Organization::class, 'o')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_EMPLOYERS)
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.type = :type')->setParameter('type', JobConstants::JOBS_TYPE_FEATURED)
            ->andWhere('j.organization = :orgId')->setParameter('orgId', $organization->getId())
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'))
            ->addOrderBy('j.id', 'DESC');

        return $qb->getQuery();
    }

    public function getNewspaperJobsByOrganizationQuery($organization)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->join(Organization::class, 'o')
            ->where('j.jobsFrom = :jobsFrom')->setParameter('jobsFrom', JobConstants::JOB_FROM_NEWSPAPER)
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.organization = :orgId')->setParameter('orgId', $organization->getId())
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'))
            ->addOrderBy('j.id', 'DESC');

        return $qb->getQuery();
    }

    public function getLatestJobs($count = 6)
    {
        $count = is_numeric($count) ? $count : 6;
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->orderBy('j.id ', 'DESC')
            ->setMaxResults($count);

        return $qb->getQuery()->getResult();
    }

    public function getRecommendedJobs(JobSeeker $seeker, $count = 6)
    {
        $count = is_numeric($count) ? $count : 6;
        $locations = $seeker->getPreferredLocations()->toArray();
        $categories = $seeker->getPreferredCategories()->toArray();
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->join('j.locations', 'l')
            ->join('j.category', 'c');
        if (!empty($categories)) {
            $qb->where(
                $qb->expr()->in('c.title', $categories)
            );
        }

        if (!empty($locations)) {
            $qb->orWhere(
                $qb->expr()->in('l.name', $locations)
            );
        }

        $qb->setMaxResults($count);

        return $qb->getQuery()->getResult();
    }

    public function getJobsByType($type = '')
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->join('j.organization', 'o')
            ->andWhere('o.deleted != 1')
            ->andWhere('o.isGovermentOrganization != 1')
            ->andWhere(
                $qb->expr()->gte('j.deadline', ':today')
            )->setParameter('today', date('Y-m-d'));

        if ($type != "") {
            $qb->andWhere('j.type = :type')->setParameter('type', $type);
        }

         $qb->orderBy('j.id', 'desc');
//        $qb->orderBy('j.updatedDate', 'desc');

        return $qb->getQuery()->getResult();
    }


    public function getHotEmployers($type = '')
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->join('j.organization', 'o')
            ->andWhere('o.deleted != 1')
            ->andWhere('o.isGovermentOrganization != 1')
            ->andWhere(
                $qb->expr()->gte('j.deadline', ':today')
            )->setParameter('today', date('Y-m-d'));

        if ($type != "") {
            $qb->andWhere('j.type = :type')->setParameter('type', $type);
        }

        $qb->groupBy('o.id');

        $qb->orderBy('j.id', 'desc');

        return $qb->getQuery()->getResult();
    }


    public function getRelatedJobs($job, $limit = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->join('j.organization', 'o')
            ->where('o.deleted != 1')
            ->andWhere('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'));

        if ($job->getCategory() != null) {
            $qb->andWhere('j.category = :category')->setParameter('category', $job->getCategory());
        }

        $qb->andWhere('j.id != :id')->setParameter('id', $job->getId());

//        if ($job->getIndustry() != null) {
//            $qb->orWhere('j.industry = :industry')->setParameter('industry', $job->getIndustry());
//        }

        if ($limit != null && $limit >= 1) {
            $qb->setMaxResults($limit);
        }


        $qb->orderBy('j.viewCount', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getJobsByOrganization($organizationId, $limit = null, $job = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status = :status')->setParameter('status', JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('IDENTITY(j.organization) = :organization')->setParameter('organization', $organizationId)
            ->andWhere(
                $qb->expr()->gte('j.deadline', $qb->expr()->literal((new \DateTime())->format('Y-m-d')))
            )
            ->orderBy('j.id', 'DESC');

        if ($job != null and $job instanceof Job) {
            $qb->andWhere('j.id != :job')->setParameter('job', $job);
        }

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();

    }


    public function getRecentJob()
    {

        $today = date('Y-m-d 10:00:00');
        $yesterday = date('Y-m-d 10:00:00', strtotime($today . "-1 days"));

        $qb = $this->_em->createQueryBuilder();
        $qb->select('j')
            ->from(Job::class, 'j')
            ->leftJoin('j.organization', 'o')
            ->where('j.status =' . JobConstants::JOB_STATUS_APPROVED)
            ->andWhere('o.isGovermentOrganization != 1')
            ->andWhere('j.deadline >= :today')->setParameter('today', date('Y-m-d'))
            ->orderBy('j.id', 'DESC');

        $qb->setMaxResults(15);


        return $qb->getQuery()->getResult();

    }

    public function getRelatedJobsByJobSeeker($seekerId, $limit = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.deadline >= :today')->setParameter('today', date('Y-m-d'));

//        $qb->andWhere(
        // OR filter by category
        // OR filter by industry
        // OR filter by location
//        );

        $qb->orderBy('j.updatedDate', 'DESC');

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }


    public function getJobsByEmployer($org)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->join('j.organization', 'o')
            ->andWhere('o.id = :organization')->setParameter('organization', $org->getId());

        return $qb->getQuery()->getResult();
    }

    public function getJobSettings($org)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('s')
            ->from(JobSetting::class, 's')
            ->join('s.job', 'j')
            ->where('j.organization = :organization')->setParameter('organization', $org);

        return $qb->getQuery()->getResult();
    }


    public function getTrashedJobs($filters = [])
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('j')
            ->from(Job::class, 'j')
            ->where('j.status =:deleted')->setParameter('deleted', JobConstants::JOB_STATUS_DELETED);

        return $qb->getQuery()->getResult();
    }


}
